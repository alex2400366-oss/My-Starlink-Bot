import os
import json
import re
from flask import Flask, request, abort
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, CallbackContext, ConversationHandler, Dispatcher
)
from datetime import datetime, timedelta

# --- ÿ•ÿπÿØÿßÿØÿßÿ™ ÿ£ÿ≥ÿßÿ≥Ÿäÿ© ---
DB_FILE = "database.json"
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD", "2400366A")
TOKEN = os.environ.get('TELEGRAM_TOKEN')
RENDER_URL = os.environ.get('RENDER_URL')
CRON_SECRET_KEY = os.environ.get('CRON_SECRET_KEY')

# ÿ≠ÿßŸÑÿßÿ™ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©
(AWAITING_ID, AWAITING_SUPPORT_MESSAGE, PASSWORD, MAIN_MENU, ADD_ID, ADD_DATE, ADD_STATUS, DELETE_MENU, EDIT_MENU, EDIT_DATE, EDIT_STATUS) = range(11)

# --- ÿØŸàÿßŸÑ ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ---
def load_db():
    try:
        with open(DB_FILE, "r", encoding='utf-8') as f: return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError): return {}
def save_db(data):
    with open(DB_FILE, "w", encoding='utf-8') as f: json.dump(data, f, indent=4, ensure_ascii=False)

# --- ÿØÿßŸÑÿ© ÿ™Ÿáÿ±Ÿäÿ® ÿßŸÑÿ≠ÿ±ŸàŸÅ ÿßŸÑÿÆÿßÿµÿ© (ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´Ÿáÿß) ---
def escape_markdown(text: str) -> str:
    if not text: return ""
    # ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÜŸÇÿ∑ÿ© ŸÑŸÑŸÇÿßÿ¶ŸÖÿ©
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# --- ÿ¨ÿ≤ÿ° ÿßŸÑŸàŸäÿ® ÿ≥Ÿäÿ±ŸÅÿ± (ÿ£ÿ≥ÿßÿ≥ ÿßŸÑÿ®Ÿàÿ™ ÿßŸÑÿ¢ŸÜ) ---
app = Flask(__name__)

@app.route('/')
def home(): return "Bot is running with Webhook!"

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook_handler():
    if request.is_json:
        update_json = request.get_json(force=True)
        update = Update.de_json(update_json, bot)
        dispatcher.process_update(update)
    return 'ok', 200

def check_subscriptions_once(bot: Bot) -> None:
    print(f"CRON JOB TRIGGERED: Running check...")
    db = load_db(); today = datetime.now().date()
    for key, info in db.items():
        date_str = info.get('renewal_date')
        if date_str:
            try:
                renewal_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                if renewal_date - today == timedelta(days=2):
                    for user_id in info.get('favorited_by', []):
                        message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ *{escape_markdown(key)}* –∏—Å—Ç–µ–∫–∞–µ—Ç *{escape_markdown(date_str)}*\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ\\."
                        try: bot.send_message(chat_id=user_id, text=message, parse_mode='MarkdownV2')
                        except Exception as e: print(f"Error sending notification to {user_id}: {e}")
            except ValueError: print(f"Invalid date for {key}: {date_str}")
    print("Check finished.")

@app.route('/run-checks/<secret_key>')
def run_checks_endpoint(secret_key):
    if not CRON_SECRET_KEY or secret_key != CRON_SECRET_KEY: abort(401)
    if bot:
        Thread(target=check_subscriptions_once, args=(bot,)).start()
        return "Check process started."
    return "Bot instance not ready.", 503

# --- Ÿàÿ∏ÿßÿ¶ŸÅ ÿßŸÑÿ®Ÿàÿ™ ---
def start(update: Update, context: CallbackContext) -> None:
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ä–æ—É—Ç–µ—Ä–∞."
    keyboard = [[InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Ä–æ—É—Ç–µ—Ä", callback_data='start_search')]]
    update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))

def favorites(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id; db = load_db()
    fav_list = [f"- `{escape_markdown(rid)}` \\(–∏—Å—Ç–µ–∫–∞–µ—Ç: {escape_markdown(info.get('renewal_date', 'N/A'))}\\)" for rid, info in db.items() if user_id in info.get('favorited_by', [])]
    message = "‚≠ê *–í–∞—à–∏ —Ä–æ—É—Ç–µ—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º:*\n\n" + "\n".join(fav_list) if fav_list else "–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç."
    update.message.reply_text(message, parse_mode='MarkdownV2')

def favorite_button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query; query.answer(); router_id = query.data.split('_')[1]; user_id = query.from_user.id
    db = load_db(); info = db.get(router_id, {})
    if 'favorited_by' not in info: info['favorited_by'] = []
    if user_id not in info['favorited_by']:
        info['favorited_by'].append(user_id); db[router_id] = info; save_db(db)
        query.edit_message_text(text=f"‚úÖ –†–æ—É—Ç–µ—Ä *{escape_markdown(router_id)}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", parse_mode='MarkdownV2')
    else: query.edit_message_text(text=f"‚ÑπÔ∏è –†–æ—É—Ç–µ—Ä *{escape_markdown(router_id)}* —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", parse_mode='MarkdownV2')

# --- ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿßÿ™ ÿßŸÑŸÖŸàÿ≠ÿØ ---
def start_search(update: Update, context: CallbackContext) -> int:
    update.callback_query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."); return AWAITING_ID
def handle_search_input(update: Update, context: CallbackContext) -> int:
    db = load_db(); router_id = update.message.text.strip().upper(); info = db.get(router_id)
    if info:
        text = f"üõ∞Ô∏è *–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞: {escape_markdown(router_id)}*\n\n*–°—Ç–∞—Ç—É—Å:* {escape_markdown(info.get('status', 'N/A'))}\n*–î–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:* {escape_markdown(info.get('renewal_date', 'N/A'))}"
        keyboard = [[InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f'fav_{router_id}')]]; update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='MarkdownV2'); return ConversationHandler.END
    else:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —Ä–æ—É—Ç–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"); return AWAITING_ID
def start_support(update: Update, context: CallbackContext) -> int:
    text = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ä–æ—É—Ç–µ—Ä–∞."
    update.callback_query.edit_message_text(text); return AWAITING_SUPPORT_MESSAGE
def handle_support_message(update: Update, context: CallbackContext) -> int:
    ADMIN_ID = os.environ.get('ADMIN_CHAT_ID')
    if ADMIN_ID:
        user_info = update.message.from_user; escaped_username = escape_markdown(user_info.username if user_info.username else "–Ω–µ—Ç")
        forward_text = f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{escaped_username} \\(ID: `{user_info.id}`\\)"
        try:
            context.bot.send_message(chat_id=ADMIN_ID, text=forward_text, parse_mode='MarkdownV2')
            context.bot.forward_message(chat_id=ADMIN_ID, from_chat_id=update.message.chat_id, message_id=update.message.message_id)
            update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")
        except Exception as e:
            print(f"ERROR: Could not forward message to admin. Reason: {e}"); update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else: update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    return ConversationHandler.END
def manage_start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üîê –≠—Ç–∞ –æ–±–ª–∞—Å—Ç—å –∑–∞—â–∏—â–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"); return PASSWORD
def check_password(update: Update, context: CallbackContext) -> int:
    if update.message.text == ADMIN_PASSWORD: display_main_menu(update, "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"); return MAIN_MENU
    else: update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å."); return ConversationHandler.END
def display_main_menu(update: Update, text: str) -> None:
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç–µ—Ä", callback_data='add')], [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä", callback_data='delete')], [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ—É—Ç–µ—Ä", callback_data='edit')], [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã", callback_data='list')], [InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data='exit')]]
    if update.callback_query: update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else: update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
def main_menu_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query; action = query.data; db = load_db()
    if action == 'add': query.edit_message_text("‚ûï *–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ *ID —Ä–æ—É—Ç–µ—Ä–∞* (–ø—Ä–∏–º–µ—Ä: `KIT-55555`)", parse_mode='Markdown'); return ADD_ID
    elif action in ['delete', 'edit']:
        text, state = ("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", DELETE_MENU) if action == 'delete' else ("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", EDIT_MENU)
        if not db: query.edit_message_text(f"–ù–µ—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤. [üîô –ù–∞–∑–∞–¥]", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])); return MAIN_MENU
        keyboard = [[InlineKeyboardButton(f"`{rid}`", callback_data=rid)] for rid in db.keys()]; keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]); query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'); return state
    elif action == 'list':
        text = "*–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤:*\n\n" + "\n".join([f"- `{rid}` | –°—Ç–∞—Ç—É—Å: {info.get('status', 'N/A')}" for rid, info in db.items()]) if db else "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]), parse_mode='Markdown'); return MAIN_MENU
    elif action == 'back': display_main_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"); return MAIN_MENU
    elif action == 'exit': query.edit_message_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."); return ConversationHandler.END
def add_get_id(update: Update, context: CallbackContext) -> int:
    context.user_data['new_router_id'] = update.message.text.strip().upper(); update.message.reply_text("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–¥–∞—Ç—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è* (–ø—Ä–∏–º–µ—Ä: `2025-12-31`)", parse_mode='Markdown'); return ADD_DATE
def add_get_date(update: Update, context: CallbackContext) -> int:
    context.user_data['new_router_date'] = update.message.text.strip(); update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, –∏, –Ω–∞–∫–æ–Ω–µ—Ü, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å—Ç–∞—Ç—É—Å —Ä–æ—É—Ç–µ—Ä–∞* (–ø—Ä–∏–º–µ—Ä: `–∞–∫—Ç–∏–≤–µ–Ω`)", parse_mode='Markdown'); return ADD_STATUS
def add_get_status(update: Update, context: CallbackContext) -> int:
    db = load_db(); db[context.user_data['new_router_id']] = {'status': update.message.text.strip(), 'renewal_date': context.user_data['new_router_date']}; save_db(db)
    update.message.reply_text(f"‚úÖ –†–æ—É—Ç–µ—Ä `{context.user_data['new_router_id']}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode='Markdown'); context.user_data.clear(); return ConversationHandler.END
def delete_confirm(update: Update, context: CallbackContext) -> int:
    router_id = update.callback_query.data; db = load_db()
    if router_id in db: del db[router_id]; save_db(db); display_main_menu(update, f"‚úÖ –†–æ—É—Ç–µ—Ä `{router_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    return MAIN_MENU
def edit_select_router(update: Update, context: CallbackContext) -> int:
    context.user_data['edit_router_id'] = update.callback_query.data; update.callback_query.edit_message_text("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–Ω–æ–≤—É—é –¥–∞—Ç—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è* (–ø—Ä–∏–º–µ—Ä: `2026-01-15`)", parse_mode='Markdown'); return EDIT_DATE
def edit_get_date(update: Update, context: CallbackContext) -> int:
    context.user_data['edit_new_date'] = update.message.text.strip(); update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å* —Ä–æ—É—Ç–µ—Ä–∞ (–ø—Ä–∏–º–µ—Ä: `–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`)", parse_mode='Markdown'); return EDIT_STATUS
def edit_get_status(update: Update, context: CallbackContext) -> int:
    router_id = context.user_data['edit_router_id']; new_date = context.user_data['edit_new_date']; new_status = update.message.text.strip(); db = load_db()
    db[router_id]['renewal_date'] = new_date; db[router_id]['status'] = new_status; save_db(db)
    update.message.reply_text(f"‚úÖ –†–æ—É—Ç–µ—Ä `{router_id}` —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.", parse_mode='Markdown'); context.user_data.clear(); return ConversationHandler.END
def cancel_conversation(update: Update, context: CallbackContext) -> int:
    if update.message: update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear(); return ConversationHandler.END

# --- ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ®Ÿàÿ™ ŸàÿßŸÑŸÄ Webhook ---
bot = Bot(TOKEN)
# ŸÖŸáŸÖ: Updater ŸáŸÜÿß ŸÖÿ¥ ÿ®ŸÜÿ≥ÿ™ÿÆÿØŸÖŸá ŸÑŸÑŸÄ pollingÿå ÿ®ÿ≥ ÿπÿ¥ÿßŸÜ Ÿäÿ¨Ÿáÿ≤ ÿßŸÑŸÄ dispatcher
updater = Updater(TOKEN, use_context=True)
dispatcher = updater.dispatcher

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('manage_routers', manage_start), CallbackQueryHandler(start_search, pattern='^start_search$'), CallbackQueryHandler(start_support, pattern='^start_support$')],
    states={
        AWAITING_ID: [MessageHandler(Filters.text & ~Filters.command, handle_search_input)], AWAITING_SUPPORT_MESSAGE: [MessageHandler(Filters.text & ~Filters.command, handle_support_message)],
        PASSWORD: [MessageHandler(Filters.text & ~Filters.command, check_password)], MAIN_MENU: [CallbackQueryHandler(main_menu_handler)],
        ADD_ID: [MessageHandler(Filters.text & ~Filters.command, add_get_id)], ADD_DATE: [MessageHandler(Filters.text & ~Filters.command, add_get_date)], ADD_STATUS: [MessageHandler(Filters.text & ~Filters.command, add_get_status)],
        DELETE_MENU: [CallbackQueryHandler(delete_confirm)], EDIT_MENU: [CallbackQueryHandler(edit_select_router)],
        EDIT_DATE: [MessageHandler(Filters.text & ~Filters.command, edit_get_date)], EDIT_STATUS: [MessageHandler(Filters.text & ~Filters.command, edit_get_status)],
    },
    fallbacks=[CommandHandler('cancel', cancel_conversation)], per_message=False, allow_reentry=True
)
dispatcher.add_handler(conv_handler)
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("favorites", favorites))
dispatcher.add_handler(CallbackQueryHandler(favorite_button_handler, pattern='^fav_.*$'))

# --- ÿßŸÑŸàÿ∏ŸäŸÅÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ---
if __name__ == '__main__':
    bot.set_webhook(url=f'{RENDER_URL}/{TOKEN}')
    print("Webhook is set. Starting Flask server...")
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
